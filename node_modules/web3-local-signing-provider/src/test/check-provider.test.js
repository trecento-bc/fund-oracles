const chai = require('chai')
const LocalProvider = require('../local-provider')
const Web3 = require('web3')
const Token = require('./Token.json')
const ganache = require("ganache-cli");
const server = ganache.server();
const GANACHE_PORT = 8115
server.listen(GANACHE_PORT);

const expect = chai.expect

const provider = new LocalProvider([
    'fdb2886b1ff5a0e60f9a4684e385aa7b77f064730304143f08ba96ca1a17effa',
    '8d8697970c933b856a02c5c2a9e1ead92b434d6cb724a0635219a1568a4cfd51'
  ],
  new Web3.providers.HttpProvider('http://localhost:' + GANACHE_PORT))
const web3 = provider.web3

describe('local web3 provider', () => {
  let accounts
  let tkn

  before(async () => {
    accounts = await web3.eth.getAccounts()
    web3.eth.defaultAccount = '0x0f21f6fb13310ac0e17205840a91da93119efbec'
  })

  it('transfers 1 ETH from node account', async () => {
    let receipt = await web3.eth.sendTransaction({
      from: accounts[5],
      to: '0x0f21f6fb13310ac0e17205840a91da93119efbec',
      gasPrice: 12,
      value: 1e18
    })
    expect(receipt.status).to.be.equal('0x01')
  })

  it('transfers 1 ETH', async () => {
    let receipt = await web3.eth.sendTransaction({
      from: '0x0f21f6fb13310ac0e17205840a91da93119efbec',
      to: '0x205161Cec3b55cA9a5997eeaf983B798D5Dc8408',
      gasPrice: 12,
      value: 1e17
    })
    expect(receipt.status).to.be.equal('0x01')
  })

  it('can deploy a token contract', async () => {
    tkn = new web3.eth.Contract(Token.abi);
    let receipt = await tkn.deploy({data: Token.bytecode}).send({from: '0x0f21f6fb13310ac0e17205840a91da93119efbec'})

    expect(receipt.status).to.be.equal('0x01')
    expect(receipt.contractAddress).to.not.be.null

    tkn.options.address = receipt.contractAddress
  })

  it('mints tokens', async () => {
    let receipt = await tkn.methods.mint('0x205161Cec3b55cA9a5997eeaf983B798D5Dc8408', 1e18)
      .send({from: '0x0f21f6fb13310ac0e17205840a91da93119efbec'})

    expect(receipt.status).to.be.equal('0x01')

    let balance = await tkn.methods.balanceOf('0x205161Cec3b55cA9a5997eeaf983B798D5Dc8408').call()
    expect(balance).to.be.equal('1000000000000000000')
  })

  it('transfers tokens', async () => {
    let receipt = await tkn.methods.transfer('0x951603b001b1fcfb97e1b51895c22bc368604d57', 1e9)
      .send({from: '0x205161Cec3b55cA9a5997eeaf983B798D5Dc8408'})

    expect(receipt.status).to.be.equal('0x01')

    let balance = await tkn.methods.balanceOf('0x951603b001b1fcfb97e1b51895c22bc368604d57').call()
    expect(balance).to.be.equal('1000000000')
  })
})
